// Code generated by MockGen. DO NOT EDIT.
// Source: opensearch-cli/controller/knn (interfaces: Controller)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	knn "opensearch-cli/entity/knn"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockController is a mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// GetStatistics mocks base method
func (m *MockController) GetStatistics(arg0 context.Context, arg1, arg2 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics
func (mr *MockControllerMockRecorder) GetStatistics(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockController)(nil).GetStatistics), arg0, arg1, arg2)
}

// WarmupIndices mocks base method
func (m *MockController) WarmupIndices(arg0 context.Context, arg1 []string) (*knn.Shards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarmupIndices", arg0, arg1)
	ret0, _ := ret[0].(*knn.Shards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WarmupIndices indicates an expected call of WarmupIndices
func (mr *MockControllerMockRecorder) WarmupIndices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarmupIndices", reflect.TypeOf((*MockController)(nil).WarmupIndices), arg0, arg1)
}
